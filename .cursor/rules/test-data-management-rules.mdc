---
description: 
globs: *.py
alwaysApply: false
---
# API自动化测试数据管理规范

## 1. AI驱动的数据管理策略

### 1.1 智能数据生成
```python
class AITestDataGenerator:
    """AI驱动的测试数据生成器"""
    def generate_test_data(self, api_info: Dict) -> Dict:
        """基于API信息生成测试数据"""
        return {
            "normal_data": self._generate_normal_data(),
            "boundary_data": self._generate_boundary_data(),
            "invalid_data": self._generate_invalid_data(),
            "security_data": self._generate_security_data()
        }
    
    def _analyze_data_patterns(self, historical_data: List) -> Dict:
        """分析历史数据模式"""
        pass
    
    def _generate_data_combinations(self) -> List:
        """生成数据组合"""
        pass
```

### 1.2 数据智能验证
```python
class DataValidator:
    """数据验证器"""
    def validate_data_quality(self, data: Dict) -> bool:
        """验证数据质量"""
        pass
    
    def check_data_coverage(self, test_cases: List) -> float:
        """检查测试数据覆盖率"""
        pass
    
    def verify_data_consistency(self, data_sets: List) -> bool:
        """验证数据一致性"""
        pass
```

### 1.3 动态数据策略
```python
class DynamicDataStrategy:
    """动态数据策略管理"""
    def adjust_data_strategy(self, test_results: Dict) -> Dict:
        """基于测试结果调整数据策略"""
        pass
    
    def optimize_data_distribution(self, performance_metrics: Dict) -> Dict:
        """优化数据分布"""
        pass
```

## 2. 数据准备规则

### 2.1 数据类型定义
```python
class TestDataRules:
    # 数据类型
    REAL = "real"        # 真实数据
    MOCK = "mock"        # 模拟数据
    BOUNDARY = "bound"   # 边界数据
    INVALID = "invalid"  # 无效数据
    
    # 数据范围
    MIN_LENGTH = 0
    MAX_LENGTH = 1000
    
    # 特殊字符集
    SPECIAL_CHARS = "!@#$%^&*()_+"
    
    # AI生成规则
    DATA_PATTERNS = {
        "string": {"min_length": 1, "max_length": 100},
        "number": {"min_value": -1000, "max_value": 1000},
        "date": {"format": "YYYY-MM-DD"},
        "email": {"domains": ["test.com", "example.com"]},
        "phone": {"formats": ["+1-xxx-xxx-xxxx", "xxx-xxxx-xxxx"]}
    }
```

### 2.2 数据生成策略
- AI驱动的数据生成
  - 智能边界值分析
  - 场景化数据生成
  - 异常数据预测
- 随机数据生成
  - 基础类型数据
  - 复合类型数据
  - 特殊字符数据
- 模板数据生成
  - 预定义模板
  - 动态模板
  - 组合模板

### 2.3 数据关联规则
- 智能数据关联
  - 自动依赖分析
  - 关联规则学习
  - 动态关联调整
- 数据依赖管理
  - 前置数据
  - 关联数据
  - 派生数据
- 数据版本控制
  - 版本标识
  - 历史记录
  - 回滚机制

## 3. 数据清理策略

### 3.1 智能清理策略
- 自动化清理规则
  - 基于使用频率
  - 基于数据重要性
  - 基于存储压力
- 清理优先级
  - 关键数据保护
  - 临时数据处理
  - 历史数据归档

### 3.2 测试前清理
- 环境重置
  - 数据库重置
  - 缓存清理
  - 队列清空
- 数据初始化
  - 基础数据准备
  - 配置数据加载
  - 状态数据设置
- 环境检查
  - 连接性检查
  - 权限验证
  - 资源可用性

### 3.3 测试后清理
- 数据还原
  - 测试数据删除
  - 状态恢复
  - 配置重置
- 资源释放
  - 连接关闭
  - 临时文件清理
  - 内存释放
- 日志归档
  - 操作日志
  - 错误日志
  - 性能日志

## 4. 数据安全管理

### 4.1 智能安全防护
- 自动风险识别
  - 敏感数据检测
  - 风险模式识别
  - 异常访问监控
- 自适应安全策略
  - 动态权限调整
  - 访问控制优化
  - 加密策略更新

### 4.2 敏感数据处理
- 数据脱敏
  - 个人信息
  - 账号信息
  - 业务数据
- 加密存储
  - 加密算法
  - 密钥管理
  - 访问控制

### 4.3 数据隔离
- 环境隔离
  - 开发环境
  - 测试环境
  - 生产环境
- 数据隔离
  - 用户数据
  - 测试数据
  - 临时数据

## 5. 数据监控和维护

### 5.1 智能监控系统
- 预测性监控
  - 数据趋势分析
  - 异常预警
  - 容量预测
- 自动化报告
  - 数据质量报告
  - 使用效率分析
  - 优化建议生成

### 5.2 数据监控
- 数据量监控
  - 增长趋势
  - 使用情况
  - 清理情况
- 性能监控
  - 响应时间
  - 资源占用
  - 异常情况

### 5.3 数据维护
- 智能维护策略
  - 自动化检查
  - 问题自动修复
  - 优化建议
- 定期检查
  - 数据完整性
  - 数据一致性
  - 数据有效性
- 定期清理
  - 过期数据
  - 无效数据
  - 冗余数据 